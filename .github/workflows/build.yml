name: Build and Release Raylib with MinGW and Libraries

on:
  workflow_dispatch:
  push:
    tags: [ "v*" ]

jobs:
  build:
    strategy:
      matrix:
        arch: [i686, x86_64]
      fail-fast: false
    runs-on: windows-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download MinGW-w64
      run: |
        $arch = "${{ matrix.arch }}"
        if ($arch -eq "i686") {
          $mingwUrl = "https://github.com/niXman/mingw-builds-binaries/releases/download/15.1.0-rt_v12-rev0/i686-15.1.0-release-posix-dwarf-msvcrt-rt_v12-rev0.7z"
          $mingwDir = "mingw32"
        } else {
          $mingwUrl = "https://github.com/niXman/mingw-builds-binaries/releases/download/15.1.0-rt_v12-rev0/x86_64-15.1.0-release-posix-seh-msvcrt-rt_v12-rev0.7z"
          $mingwDir = "mingw64"
        }
        Invoke-WebRequest -Uri $mingwUrl -OutFile "mingw.7z"
        echo "MINGW_DIR=$mingwDir" >> $env:GITHUB_ENV

    - name: Install 7-Zip with Chocolatey
      run: choco install 7zip -y

    - name: Extract MinGW
      run: 7z x mingw.7z -o"$env:MINGW_DIR"

    - name: Add MinGW to PATH
      run: |
        $mingwPath = "$pwd\$env:MINGW_DIR\bin"
        echo "$mingwPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Verify GCC version
      run: gcc --version

    - name: Clone Raylib source
      run: |
        git clone --depth 1 --branch 5.0 https://github.com/raysan5/raylib.git

    - name: Build Raylib
      run: |
        cd raylib/src
        make PLATFORM=PLATFORM_DESKTOP CC=gcc RAYLIB_LIBTYPE=STATIC -j4
        make PLATFORM=PLATFORM_DESKTOP CC=gcc RAYLIB_LIBTYPE=SHARED -j4

    - name: Build SQLite
      run: |
        $sqliteUrl = "https://sqlite.org/2024/sqlite-amalgamation-3460000.zip"
        Invoke-WebRequest -Uri $sqliteUrl -OutFile "sqlite.zip"
        7z x sqlite.zip -o"sqlite-src"
        
        # 修复：进入解压后的实际目录
        cd sqlite-src
        $sqliteDir = Get-ChildItem -Directory | Select-Object -First 1
        if ($sqliteDir) {
            cd $sqliteDir.Name
        }
        
        # 修复：使用完整路径确保找到文件
        gcc -c -O2 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_RTREE .\sqlite3.c -o sqlite3.o
        & "$env:MINGW_DIR\bin\ar" rcs libsqlite3.a sqlite3.o
        gcc -shared -O2 -DSQLITE_ENABLE_JSON1 -DSQLITE_ENABLE_FTS5 -DSQLITE_ENABLE_RTREE .\sqlite3.c -o sqlite3.dll '-Wl,--out-implib,libsqlite3.dll.a'

    - name: Build cJSON
      run: |
        git clone --depth 1 --branch v1.7.17 https://github.com/DaveGamble/cJSON.git
        
        cd cJSON
        mkdir build
        cd build
        cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release -DENABLE_CJSON_UTILS=On -DENABLE_CJSON_TEST=Off -DBUILD_SHARED_LIBS=Off ..
        cmake --build . --config Release
        
        cd ..
        mkdir build_shared
        cd build_shared
        cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release -DENABLE_CJSON_UTILS=On -DENABLE_CJSON_TEST=Off -DBUILD_SHARED_LIBS=On ..
        cmake --build . --config Release

    - name: Create package
      run: |
        $arch = "${{ matrix.arch }}"
        mkdir "raylib_$arch"
        mkdir "raylib_$arch/include"
        mkdir "raylib_$arch/lib"
        mkdir "raylib_$arch/bin"
        
        # Raylib
        copy raylib/src/raylib.h "raylib_$arch/include"
        copy raylib/src/raymath.h "raylib_$arch/include"
        copy raylib/src/rlgl.h "raylib_$arch/include"
        copy raylib/src/libraylib.a "raylib_$arch/lib"
        copy raylib/src/raylib.dll "raylib_$arch/bin"
        copy raylib/src/raylib.dll.def "raylib_$arch/lib"
        copy raylib/src/raylib.lib "raylib_$arch/lib"
        
        # SQLite
        # 修复：复制正确的SQLite文件
        $sqliteIncludePath = "sqlite-src"
        if (Test-Path "sqlite-src\sqlite-amalgamation-*") {
            $sqliteIncludePath = (Get-ChildItem "sqlite-src\sqlite-amalgamation-*" -Directory | Select-Object -First 1).FullName
        }
        copy "$sqliteIncludePath\sqlite3.h" "raylib_$arch/include"
        copy "$sqliteIncludePath\sqlite3ext.h" "raylib_$arch/include"
        copy "$sqliteIncludePath\libsqlite3.a" "raylib_$arch/lib"
        copy "$sqliteIncludePath\sqlite3.dll" "raylib_$arch/bin"
        copy "$sqliteIncludePath\libsqlite3.dll.a" "raylib_$arch/lib"
        
        # cJSON
        copy cJSON/cJSON.h "raylib_$arch/include"
        copy cJSON/build/libcjson.a "raylib_$arch/lib"
        copy cJSON/build_shared/libcjson.dll "raylib_$arch/bin"
        copy cJSON/build_shared/libcjson.dll.a "raylib_$arch/lib"
        
        # Version info
        echo "Raylib 5.0 built with MinGW-w64 GCC 15.1.0 ($arch)" > "raylib_$arch/version.txt"
        echo "SQLite version: 3.46.0" >> "raylib_$arch/version.txt"
        echo "cJSON version: 1.7.17" >> "raylib_$arch/version.txt"
        echo "Build date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" >> "raylib_$arch/version.txt"

    - name: Zip package
      run: 7z a -tzip "raylib_full_${{ matrix.arch }}.zip" "raylib_${{ matrix.arch }}"

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: raylib-full-${{ matrix.arch }}
        path: raylib_full_${{ matrix.arch }}.zip

  release:
    needs: build
    runs-on: windows-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref }}
        name: "Raylib MinGW-w64 Full Bundle"
        files: |
          artifacts/raylib-full-i686/raylib_full_i686.zip
          artifacts/raylib-full-x86_64/raylib_full_x86_64.zip
